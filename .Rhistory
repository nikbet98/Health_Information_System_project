format(data, format="%d/%m/%Y %H:%M:%S")
format(as.POSIXct(data), format="%H:%M:%S")
data <- "25/05/2021 12:34:25"
format(data, format="%d/%m/%Y %H:%M:%S")
format(as.POSIXct(data), format="%H:%M:%S")
format(as.POSIXct(data, format="%d/%m/%Y %H:%M:%S"), format="%H:%M:%S")
format(as.POSIXct(data, format="%d/%m/%Y %H:%M:%S"))
temp1 <- as.Date(temp)
temp1
temp1 <- format(as.POSIXct(temp, format="%d/%m/%Y"))
temp2 <- format(as.POSIXct(temp, format="%H:%M:%S"))
temp2 <- format(as.POSIXct(data, format="%d/%m/%Y %H:%M:%S"), format="%H:%M:%S")
temp2 <- format(as.POSIXct(temp, format="%d/%m/%Y %H:%M:%S"), format="%H:%M:%S")
temp <- format(as.POSIXct(temp, format="%d/%m/%Y %H:%M:%S"))
temp2 <- format(as.POSIXct(temp, format="%H:%M:%S"))
temp2 <- format(as.POSIXct(temp), format = "%H:%M:%S")
temp1 <- as.Date(temp)
temp2 <- as.Date(temp, format = "%H:%M:%S")
temp2 <- format(as.POSIXct(temp), format = "%H:%M:%S")
dates <- format(as.POSIXct(dates, format="%d/%m/%Y %H:%M:%S"))
times <- format(as.POSIXct(dates), format = "%H:%M:%S")
dates <- as.Date(dates)
df$Dates <- dates
df$Times <- times
View(df)
df %>% subset(select = -Data)
df <- subset(df, select = -Data)
df <- subset(df, select = -c("idOperatore","Stato"))
df <- subset(df, select = -c(idOperatore,Stato))
write.csv(df, "./dataset/sensor_readings_cleaned.csv")
write.csv(df, "./datasets/sensor_readings_cleaned.csv")
df_stations <- read.csv("./datasets/station_dataset.csv")
View(df_stations)
table(df_stations$NomeTipoSensore)
table(df_stations$Comune)
table(df_stations$UnitaMisura)
table(df_stations$Provincia)
summary(df_stations)
str(df_stations)
colnames(df$idSensore) <- "IdSensore"
colnames(df$idSensore) <- c(IdSensore)
colnames(df$idSensore) <- c("IdSensore")
rename(df,"idSensore" = "IdSensore")
rename(df,"IdSensore" = "idSensore")
View(df)
df <- rename(df,"IdSensore" = "idSensore")
ids <- df$IdSensore
for (id in ids){
if (id !in (df_stations$IdSensore)){
ids <- df$IdSensore
for (id in ids){
if (!(id %in% df_stations$IdSensore)){
print("sensor "{id}" not present in the dataset")
ids <- df$IdSensore
for (id in ids){
if (!(id %in% df_stations$IdSensore))
print("sensor "{id}" not present in the dataset")
ids <- df$IdSensore
for (id in ids){
if (!(id %in% df_stations$IdSensore))
print("sensor "+id+" not present in the dataset")
}
df <- left_join(df_stations,df, suffix = c("IdSensore"))
left_join(df, df_stations,by = "IdSensore")
df <- left_join(df,df_stations, by = "IdSensore")
View(df)
table(df$NomeTipoSensore)
table(df$DataStop)
unique(df$IdSensore)
colSums(unique(df$IdSensore))
length(unique(df$IdSensore))
df_senso
length(unique(df_stations$IdSensore))
df <- subset(df, -c(NomeStazione,Storico))
df <- subset(df, select = -c(NomeStazione,Storico))
table(df$Times)
data
data <- "12:34:25"
as.integer(as.POSIXct(data, format = "%H"))
as.character(as.POSIXct(data, format = "%H"))
as.character(format(as.POSIXct(data, format = "%H:%M:%S"), format = "%H"))
as.integer(format(as.POSIXct(data, format = "%H:%M:%S"), format = "%H"))
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
library(dplyr)
library(ggplot2)
library(tidyr)
})
df <- read.csv("./datasets/seansor_readings_cleaned.csv")
df <- read.csv("./datasets/sensor_readings_cleaned.csv")
View(df)
df_stations <- read.csv("./datasets/station_dataset.csv")
str(df_stations)
df <- rename(df,"IdSensore" = "idSensore")
df <- left_join(df,df_stations, by = "IdSensore")
df <- df %>% filter(Valore > 0)
category <- unique(df$NomeTipoSensore)
plots <- list()
for (c in category){
values <- df$Valore[df$NomeTipoSensore == c]
new_plot <- ggplot(values) +
aes(x = c, y = values) +
geom_boxplot(fill = "steelblue") +
theme_minimal()
plots <- plots + new_plot
}
category <- unique(df$NomeTipoSensore)
plots <- list()
for (c in category){
values <- df$Valore[df$NomeTipoSensore == c]
new_plot <- ggplot(df$Valore[df$NomeTipoSensore == c]) +
aes(x = c, y = df$Valore[df$NomeTipoSensore == c]) +
geom_boxplot(fill = "steelblue") +
theme_minimal()
plots <- plots + new_plot
}
values <- df %>% filter(NomeTipoSensore == "Benzene")
View(values)
category <- unique(df$NomeTipoSensore)
plots <- list()
for (c in category){
values <- df %>% filter(NomeTipoSensore == c)
new_plot <- ggplot(values) +
aes(x = c, y = values$Valore) +
geom_boxplot(fill = "steelblue") +
theme_minimal()
plots <- plots + new_plot
}
plots + facet_grid(rows = 4)
category <- unique(df$NomeTipoSensore)
plots <- ggplot()
for (c in category){
values <- df %>% filter(NomeTipoSensore == c)
new_plot <- ggplot(values) +
aes(x = c, y = values$Valore) +
geom_boxplot(fill = "steelblue") +
theme_minimal()
plots <- plots + new_plot
}
category <- unique(df$NomeTipoSensore)
for (c in category){
values <- df %>% filter(NomeTipoSensore == c)
ggplot(dat) +
aes(x = c, y = values$Valore) +
geom_boxplot(fill = "steelblue") +
theme_minimal()
}
category <- unique(df$NomeTipoSensore)
for (c in category){
values <- df %>% filter(NomeTipoSensore == c)
ggplot(values) +
aes(x = c, y = values$Valore) +
geom_boxplot(fill = "steelblue") +
theme_minimal()
}
View(plots)
values <- df %>% filter(NomeTipoSensore == "Benzene")
ggplot(values) +
aes(x = c, y = values$Valore) +
geom_boxplot(fill = "steelblue") +
theme_minimal()
values <- df %>% filter(NomeTipoSensore == "Benzene")
ggplot(values) +
aes(x = "Benzene", y = Valore) +
geom_boxplot(fill = "steelblue") +
theme_minimal()
category <- unique(df$NomeTipoSensore)
for (c in category){
values <- df %>% filter(NomeTipoSensore == c)
p <- p + ggplot(values) +
aes(x = c, y = Valore) +
geom_boxplot(fill = "steelblue") +
theme_minimal()
}
create_plots <- function(df){
category <- unique(df$NomeTipoSensore)
p <- ggplot()
for (c in category){
values <- df %>% filter(NomeTipoSensore == c)
p <- p + ggplot(values) +
aes(x = c, y = Valore) +
geom_boxplot(fill = "steelblue") +
theme_minimal()
}
return(p)
}
plots <- create_plots(df)
create_plots <- function(df){
category <- unique(df$NomeTipoSensore)
p <- ggplot()
for (c in category){
values <- df %>% filter(NomeTipoSensore == c)
p + ggplot(values) +
aes(x = c, y = Valore) +
geom_boxplot(fill = "steelblue") +
theme_minimal()
}
return(p)
}
plots <- create_plots(df)
install.packages("patchwork")
suppressPackageStartupMessages({
library(dplyr)
library(ggplot2)
library(tidyr)
library(patchwork)
})
create_plots <- function(df){
category <- unique(df$NomeTipoSensore)
p <- ggplot()
for (c in category){
values <- df %>% filter(NomeTipoSensore == c)
p + ggplot(values) +
aes(x = c, y = Valore) +
geom_boxplot(fill = "steelblue") +
theme_minimal()
}
return(p)
}
plots <- create_plots(df)
plots + facet_grid(rows = 4)
View(new_plot)
View(plots)
create_plots <- function(df){
category <- unique(df$NomeTipoSensore)
p <- ggplot()
for (c in category){
values <- df %>% filter(NomeTipoSensore == c)
p + ggplot(values) +
aes(x = c, y = Valore) +
geom_boxplot(fill = "steelblue") +
theme_minimal()
}
return(p)
}
create_plots(df) + facet_grid()
category <- unique(df$NomeTipoSensore)
p <- ggplot()
for (c in category){
values <- df %>% filter(NomeTipoSensore == c)
p + ggplot(values) +
aes(x = c, y = Valore) +
geom_boxplot(fill = "steelblue") +
theme_minimal()
}
p + facet_grid()
p <- ggplot(df) +
aes(x = NomeTipoSensore, y = Valore) +
geom_boxplot(fill = "steelblue") +
theme_minimal()
p + facet_wrap(vars(NomeTipoSensore))
p <- ggplot(df) +
aes(x = "", y = Valore) +
geom_boxplot(fill = "steelblue") +
theme_minimal()
p + facet_wrap(vars(NomeTipoSensore),scales = "free_y")
remove_outlier <- function(df){
category <- unique(df$NomeTipoSensore)
for (c in category){
values <- df$Valore[df$NomeTipoSensore == c]
quantile25 <- quantile(values, probs = 0.25)
quantile75 <- quantile(values, probs = 0.75)
IQR <- quantile75 - quantile25
df <- df %>% filter(!(NomeTipoSensore == c & (Valore > quantile75 + (IQR * 1.5) | Valore < quantile25 - (IQR * 1.5))))
}
return(df)
}
df <- remove_outlier(df)
p <- ggplot(df) +
aes(x = "", y = Valore) +
geom_boxplot(fill = "steelblue") +
theme_minimal()
p + facet_wrap(vars(NomeTipoSensore),scales = "free_y")
View(df)
pm10 <- filter(df, NomeTipoSensore == "PM10 (SM2005)")
table(pm10$Times)
View(df)
table(df$UnitaMisura)
prova <- "12:43:00"
a <- format(prova, format = "%H")
a <- format(as.POSIXct(prova, format = "%H:%M:%S"), format = "%H")
df$Times <- df$Times %>% format(as.POSIXct(format = "%H:%M:%S"), format = "%H")
df$Times <- format(as.POSIXct(df$Times, format = "%H:%M:%S"), format = "%H")
station <- df %>% subset(select = c(Idstazione,lat,lng,Utm_Nord,UTM_Est)) %>% group_by(by="IdStazione")
View(station)
station <- df %>% subset(select = c(Idstazione,lat,lng,Utm_Nord,UTM_Est)) %>% group_by(Idstazione)
View(station)
station <- df %>% subset(select = c(Idstazione,lat,lng,Utm_Nord,UTM_Est)) %>% group_by(Idstazione) %>% summarise()
View(station)
length(unique(df$Idstazione))
length(unique(df_stations$Idstazione))
station <- df %>% subset(select = c(Idstazione,lat,lng,Utm_Nord,UTM_Est)) %>% group_by(Idstazione) %>% summarise(lat = mean(lat), lng = mean(lng), Utm_Nord = mean(Utm_Nord),UTM_Est = mean(UTM_Est))
View(station)
station <- df %>% subset(select = c(Idstazione,lat,lng,Utm_Nord,UTM_Est,Quota)) %>% group_by(Idstazione) %>% summarise(lat = mean(lat), lng = mean(lng), Utm_Nord = mean(Utm_Nord),UTM_Est = mean(UTM_Est), Quota = mean(Quota))
install.packages("ggmap")
suppressPackageStartupMessages({
library(dplyr)
library(ggplot2)
library(ggmap)
library(tidyr)
library(patchwork)
})
qmplot(lat,lng,df)
qmplot(lat,lng,station)
qmplot(x=lng,y=lat,station)
qmplot(x="lng",y="lat",data = station)
qmplot(x=lng,y=lat,data = station)
qmplot(x=lng,y=lat,data = station, zoom = 6)
qmplot(x=lng,y=lat,data = station, zoom = 6, source = "osm")
qmplot(x=lng,y=lat,data = station, zoom = 6, source = "google")
qmplot(x=lng,y=lat,data = station, zoom = 6, source = "osm")
qmplot(x=lng,y=lat,data = station, zoom = 6, source = "OSM")
qmplot(x=lng,y=lat,data = station, zoom = 6, source = "osm")
install.packages("osmdata")
api_key <- readline("stadia_key.txt")
api_key <- readline("./stadia_key.txt")
api_key <- readLines("./stadia_key.txt")
api_key <- readLines("stadia_key.txt")
api_key <- read.table("stadia_key.txt",skip="1",sep="")
api_key <- read.table(file = "stadia_key.txt",header = F, nrows = 1)
api_key <- read.table(file = "./stadia_key.txt",header = F, nrows = 1)
api_key <- read.table(file = './stadia_key.txt',header = F, nrows = 1)
api_key <- read.table(file = './stadia_key.txt',header = F, nrows = 1)
View(api_key)
con <- file("stadia_key.txt")
con <- file("stadia_key.txt", "r")
api_key <- readLines(con, n=1)
api_key
api_key <- read.table(file = './stadia_key.txt',header = F, nrows = 1)
api_key
api_key <- readLines(con, n=1)
close(con)
api_key
con <- file("stadia_key.txt", "r")
api_key <- readLines(con, n=1)
close(con)
register_stadiamaps(api_key, write = FALSE)
qmplot(x=lng,y=lat,data = station, zoom = 6, source = "stadia")
qmplot(x=lng,y=lat,data = station, source = "stadia")
qmplot(x=lng,y=lat,data = station, source = "stadia",maptype = "stamen_toner_lite", color = I("red"))
qmplot(x=lng,y=lat,data = station, source = "stadia",maptype = "toner_lite", color = I("red"))
qmplot(x=lng,y=lat,data = station, source = "stadia",maptype = "stamen_toner_lite", color = NomeTipoSensore)
(x=lng,y=lat,data = station, source = "stadia",maptype = "stamen_toner_lite", color = I("red"))
(lng,lat,data = station, source = "stadia",maptype = "stamen_toner_lite", color = I("red"))
qmplot(x=lng,y=lat,data = station, source = "stadia",maptype = "stamen_toner_lite", color = I("red"))
qmplot(x=lng,y=lat,data = station, source = "stadia",maptype = "OSM_Bright", color = I("red"))
qmplot(x=lng,y=lat,data = station, source = "stadia",maptype = "osm", color = I("red"))
qmplot(x=lng,y=lat,data = station, source = "stadia",maptype = "roadmap", color = I("red"))
qmplot(x=lng,y=lat,data = station, source = "stadia",maptype = "stamen_toner_lines", color = I("red"))
View(df)
df_25 <- df %>% filter(NomeTipoSensore == "Particelle sospese PM2.5")
View(df_25)
table(df_25$UnitaMisura)
View(df)
str(df_25)
df$Dates <- df_25$Dates %>% as.Date()
df_25$Dates <- df_25$Dates %>% as.Date()
str(df_25)
df_25 <- df %>% filter(NomeTipoSensore == "Particelle sospese PM2.5")
df_25 <- df_25 %>% arrange(Dates)
ggplot(df_25) +
aes(x=Dates, y=Valore) +
geom_line()
ggplot(df_25) +
aes(x=Dates, y=Valore) +
geom_line()
df_25 <- df %>% filter(NomeTipoSensore == "Particelle sospese PM2.5")
df_25 <- df_25 %>% arrange(Dates)
df_25 <- df_25 %>% group_by(Dates) %>% summarise(value = mean(Valore))
View(df_25)
ggplot(df_25) +
aes(x=Dates, y=Valore) +
geom_line()
ggplot(df_25) +
aes(x=Dates, y=value) +
geom_line()
View(df)
View(df_25)
View(df_25)
View(df_25)
View(df_25)
View(df_25)
View(df_25)
View(df_25)
View(df_25)
View(df_25)
View(df_25)
View(df_25)
df_25 <- df %>% filter(NomeTipoSensore == "Particelle sospese PM2.5")
df_25 <- df_25 %>% arrange(Dates)
df_25 <- df_25 %>% group_by(Dates) %>% summarise(value = mean(Valore))
df_25$Dates <- df_25$Dates %>% as.Date()
str(df_25)
ggplot(df_25) +
aes(x=Dates, y=value) +
geom_line()
ggplot(df_25) +
geom_line(
aes(x=Dates, y=value)
)
ggplot(df_25) +
geom_line(
aes(x=Dates, y=value), color = "red"
)
options(repr.plot.width = 5, repr.plot.height =2)
ggplot(df_25) +
geom_line(
aes(x=Dates, y=value), color = "red"
)
options(repr.plot.width = 10, repr.plot.height =2)
ggplot(df_25) +
geom_line(
aes(x=Dates, y=value), color = "red"
)
df_25 <- df %>% filter(NomeTipoSensore == "Particelle sospese PM2.5")
df_25 <- df_25 %>% arrange(Dates)
df_25 <- df_25 %>% group_by(Dates) %>% summarise(value = mean(Valore)) %>% filter(Dates < "01/01/2019")
df_25$Dates <- df_25$Dates %>% as.Date()
df_25 <- df %>% filter(NomeTipoSensore == "Particelle sospese PM2.5")
df_25 <- df_25 %>% arrange(Dates)
df_25 <- df_25 %>% group_by(Dates) %>% summarise(value = mean(Valore)) %>% filter(Dates < as.Date("01/01/2019"))
df_25$Dates <- df_25$Dates %>% as.Date()
prova <- as.Date("01/01/2019")
df_25 <- df %>% filter(NomeTipoSensore == "Particelle sospese PM2.5")
df_25 <- df_25 %>% arrange(Dates)
df_25 <- df_25 %>% group_by(Dates) %>% summarise(value = mean(Valore)) %>% filter(Dates < as.Date("2019/01/01"))
df_25$Dates <- df_25$Dates %>% as.Date()
options(repr.plot.width = 10, repr.plot.height =2)
ggplot(df_25) +
geom_line(
aes(x=Dates, y=value), color = "red"
)
df_25 <- df %>% filter(NomeTipoSensore == "Particelle sospese PM2.5")
df_25 <- df_25 %>% arrange(Dates)
df_25 <- df_25 %>% group_by(Dates) %>% summarise(value = mean(Valore)) %>% filter(Dates < as.Date("2020/01/01"))
df_25$Dates <- df_25$Dates %>% as.Date()
options(repr.plot.width = 10, repr.plot.height =2)
ggplot(df_25) +
geom_line(
aes(x=Dates, y=value), color = "red"
)
df_25 <- df %>% filter(NomeTipoSensore == "Particelle sospese PM2.5")
df_25 <- df_25 %>% arrange(Dates)
df_25 <- df_25 %>% group_by(Dates) %>% summarise(value = mean(Valore)) %>% filter(Dates < as.Date("2021/01/01") & Dates > as.Date("2019/12/31"))
df_25$Dates <- df_25$Dates %>% as.Date()
options(repr.plot.width = 10, repr.plot.height =2)
ggplot(df_25) +
geom_line(
aes(x=Dates, y=value), color = "red"
)
df_25 <- df %>% filter(NomeTipoSensore == "Particelle sospese PM2.5" & Provincia == "BS")
df_25 <- df_25 %>% arrange(Dates)
df_25 <- df_25 %>% group_by(Dates) %>% summarise(value = mean(Valore)) %>% filter(Dates < as.Date("2021/01/01") & Dates > as.Date("2019/12/31"))
df_25$Dates <- df_25$Dates %>% as.Date()
options(repr.plot.width = 10, repr.plot.height =2)
ggplot(df_25) +
geom_line(
aes(x=Dates, y=value), color = "red"
)
df_25 <- df %>% filter(NomeTipoSensore == "Particelle sospese PM2.5" & Provincia == "BS")
df_25 <- df_25 %>% arrange(Dates)
df_25 <- df_25 %>% filter(Dates < as.Date("2021/01/01") & Dates > as.Date("2019/12/31"))
df_25$Dates <- df_25$Dates %>% as.Date()
options(repr.plot.width = 10, repr.plot.height =2)
ggplot(df_25) +
geom_line(
aes(x=Dates, y=value), color = "red"
)
options(repr.plot.width = 10, repr.plot.height =2)
ggplot(df_25) +
geom_line(
aes(x=Dates, y=Valore), color = "red"
)
options(repr.plot.width = 10, repr.plot.height =2)
ggplot(df_25) +
geom_line(
aes(x=Dates, y=Valore), color = "red"
) +
geom_smooth()
options(repr.plot.width = 10, repr.plot.height =2)
ggplot(df_25) +
aes(x=Dates, y=Valore) +
geom_line(color = "red") +
geom_smooth()
ggplot(df, aes(x="", y=NomeTipoSensore, fill=group)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void()
ggplot(df, aes(x="", y=NomeTipoSensore, fill=NomeTipoSensore)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void()
prova <- table(df$NomeTipoSensore)
prova
str(prova)
df %>% group_by(NomeTipoSensore) %>% summarise(n = count())
df %>% group_by(NomeTipoSensore) %>% summarise(n = count(Valore))
df %>% group_by(NomeTipoSensore) %>% summarise()
View(df)
df %>% group_by(NomeTipoSensore) %>% summarise(n = count(NomeTipoSensore))
df %>% group_by(NomeTipoSensore) %>% summarise(n = n())
raeadings_count <- df %>% group_by(NomeTipoSensore) %>% summarise(n = n())
ggplot(raeadings_count, aes(x="", y=NomeTipoSensore, fill=n)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void()
raeadings_count <- df %>% group_by(NomeTipoSensore) %>% summarise(n = n())
ggplot(raeadings_count, aes(x="", y=n, fill=NomeTipoSensore)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void()
table(df)
